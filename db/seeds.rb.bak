# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)

states = [
  "Alabama",
  "Alaska",
  "Arizona",
  "Arkansas",
  "California",
  "Colorado",
  "Connecticut",
  "Delaware",
  "Florida",
  "Georgia",
  "Hawaii",
  "Idaho",
  "Illinois",
  "Indiana",
  "Iowa",
  "Kansas",
  "Kentucky",
  "Louisiana",
  "Maine",
  "Maryland",
  "Massachusetts",
  "Michigan",
  "Minnesota",
  "Mississippi",
  "Missouri",
  "Montana",
  "Nebraska",
  "Nevada",
  "New Hampshire",
  "New Jersey",
  "New Mexico",
  "New York",
  "North Carolina",
  "North Dakota",
  "Ohio",
  "Oklahoma",
  "Oregon",
  "Pennsylvania",
  "Rhode Island",
  "South Carolina",
  "South Dakota",
  "Tennessee",
  "Texas",
  "Utah",
  "Vermont",
  "Virginia",
  "Washington",
  "West Virginia",
  "Wisconsin",
  "Wyoming"
]

states.each do |state|
  State.create(name: state)
end

ingredients = [
  "asian pears",
  "asparagus",
  "beans",
  "blackberries",
  "blueberries",
  "broccoli",
  "cabbage",
  "cantaloupes",
  "cherries",
  "cucumbers",
  "eggplant",
  "greens",
  "herbs",
  "nectarines",
  "peaches",
  "peas",
  "peppers",
  "plums",
  "potatoes",
  "raspberries",
  "rhubarb",
  "pumpkins",
  "squash",
  "strawberries",
  "sweet corn",
  "sweet potatoes",
  "tomatoes",
  "watermelons"
]

ingredients.each do |ingredient|
  Ingredient.create(name: ingredient)
end

IngredientState.create([
  {ingredient_id: 1, state_id: 9, "31/10/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 2, state_id: 9, "15/4/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 3, state_id: 9, "31/10/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 4, state_id: 9, "30/6/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 5, state_id: 9, "31/5/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 6, state_id: 9, "31/3/2018 0:00"}, in_season_week: 46,
  {ingredient_id: 7, state_id: 9, "31/3/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 8, state_id: 9, "30/9/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 9, state_id: 9, "31/7/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 10, state_id: 9, "31/10/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 11, state_id: 9, "30/9/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 13, state_id: 9, "31/10/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 14, state_id: 9, "30/6/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 15, state_id: 9, "30/6/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 16, state_id: 9, "31/3/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 17, state_id: 9, "30/9/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 18, state_id: 9, "30/6/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 19, state_id: 9, "31/7/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 20, state_id: 9, "30/9/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 21, state_id: 9, "30/6/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 22, state_id: 9, "31/10/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 23, state_id: 9, "31/10/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 24, state_id: 9, "30/4/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 24, state_id: 9, "30/9/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 26, state_id: 9, "31/10/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 27, state_id: 9, "31/10/2017 0:00"}, in_season_week: 46,
  {ingredient_id: 28, state_id: 9, "31/10/2017 0:00"}, in_season_week: 46,
  ])



  require 'json'

  file = File.read(File.join(Rails.root, 'db/data.json'))
  data = JSON.parse(file)

  ingredients = [
    "apples",
    "apricots",
    "asian pears",
    "asparagus",
    "avocados",
    "beans",
    "beets",
    "bell pepper",
    "blackberries",
    "blueberries",
    "bok choy",
    "broccoli",
    "brussel sprouts",
    "cabbage",
    "cantaloupes",
    "carambola",
    "carrots",
    "cauliflower",
    "celery",
    "cherries",
    "corn",
    "cucumbers",
    "currants",
    "eggplant",
    "fennel",
    "grapefruits",
    "grapes",
    "greens",
    "guava",
    "halibut",
    "herbs",
    "honey",
    "kale",
    "lettuce",
    "lima beans",
    "longan",
    "lychee",
    "mango",
    "mushrooms",
    "nectarines",
    "okra",
    "onion",
    "oranges",
    "oysters",
    "papaya",
    "passion fruit",
    "peaches",
    "pears",
    "peanut",
    "peas",
    "pecans",
    "peppers",
    "pistachios",
    "plums",
    "pollock",
    "potatoes",
    "pumpkins",
    "radishes",
    "raspberries",
    "rhubarb",
    "rutabaga",
    "scallion",
    "shrimp",
    "snap bean",
    "spinach",
    "squash",
    "strawberries",
    "sweet corn",
    "sweet potatoes",
    "tangerines",
    "tomatoes",
    "turkey-bourbon red",
    "turkey-midget white",
    "turkey-standard bronze",
    "turnips",
    "watermelons",
    "zucchini",
  ]

  ingredients.each do |ingredient|
    Ingredient.create(name: ingredient)
  end

  def get_weeks_from_period(time_period)
  	# time_period (string), that maps to a early or late period of a month
  	# returns an array of integers that converts the time_period to series
  	# of week numbers in a 52-week year.

  	# data source:
  	# http://www.simplesteps.org/eat-local/state/


  	case time_period
  	when ["Early", "January"]
  		return [1, 2]
  	when ["Late", "January"]
  		return [3, 4]
  	when ["Early", "February"]
  		return [5, 6]
  	when ["Late", "February"]
  		return [7, 8]
  	when ["Early", "March"]
  		return [9, 10]
  	when ["Late", "March"]
  		return [11, 12, 13]
  	when ["Early", "April"]
  		return [14, 15]
  	when ["Late", "April"]
  		return [16, 17]
  	when ["Early", "May"]
  		return [18, 19]
  	when ["Late", "May"]
  		return [20, 21]
  	when ["Early", "June"]
  		return [22, 23]
  	when ["Late", "June"]
  		return [24, 25, 26]
  	when ["Early", "July"]
  		return [27, 28]
  	when ["Late", "July"]
  		return [29, 30]
  	when ["Early", "August"]
  		return [31, 32]
  	when ["Late", "August"]
  		return [33, 34]
  	when ["Early", "September"]
  		return [35, 36]
  	when ["Late", "September"]
  		return [37, 38, 39]
  	when ["Early", "October"]
  		return [40, 41]
  	when ["Late", "October"]
  		return [42, 43]
  	when ["Early", "November"]
  		return [44, 45]
  	when ["Late", "November"]
  		return [46, 47, 48]
  	when ["Early", "December"]
  		return [49, 50]
  	when ["Late", "December"]
  		return [51, 52]


  	end
    # puts "inside method get_weeks from: #{time_period}"
    # puts "inside method get_weeks from: #{time_period.class}"
  end

  def paths_in_data(data, parent)
      unless [Hash, Array].map{|class_| data.class == class_ }.any?
          return [parent]
      else
          items = []
          if data.class == Hash
            data.map do |k, v|
                items.push(paths_in_data(v, parent + [k, ]))
            end
          else
            data.map do |v|
                items.push(paths_in_data(v, parent + [data.index(v), ]))
            end
          end
      end
      return items.reduce(:+)
  end

  def get(path, obj)
    path.reduce(obj) { |obj, key| (obj && obj[key]) ? obj[key] : null }
  end

  data.each do |state_data|
    paths = paths_in_data(state_data, [])
    # unless paths.nil?
      paths_in_data(state_data, []).each do |path|
        state_name, period_key, _ = path
        # p state_name
        ingredient_value = get(path, state_data)
        period_key = JSON.parse(period_key)
        # get_weeks_from_period(period_key)
        p [state_name, period_key, get_weeks_from_period(period_key), ingredient_value]
        # p period_key
        omit_ingredients = [ "Christmas Trees", "Wreathes", "Eastern", "Pacific"]
        state = State.find_or_create_by(name: state_name)
        ingredient = Ingredient.find_or_create_by(name: ingredient_value.downcase)
        ingredient_state = IngredientState.find_or_create_by(
          state: state,
          ingredient: ingredient.reject(omit_ingredients),
          in_season_week: get_weeks_from_period(period_key.each),
        )
        puts "#{ingredient_state} loaded..."
      end
    end


    require 'json'
    require 'HTTParty'
    require 'nokogiri'


    ingredients = [
      "apples",
      "apricots",
      "asian pears",
      "asparagus",
      "avocados",
      "beans",
      "beets",
      "bell pepper",
      "blackberries",
      "blueberries",
      "bok choy",
      "broccoli",
      "brussel sprouts",
      "cabbage",
      "cantaloupes",
      "carambola",
      "carrots",
      "cauliflower",
      "celery",
      "cherries",
      "corn",
      "cucumbers",
      "currants",
      "eggplant",
      "fennel",
      "grapefruits",
      "grapes",
      "greens",
      "guava",
      "halibut",
      "herbs",
      "honey",
      "kale",
      "lettuce",
      "lima beans",
      "longan",
      "lychee",
      "mango",
      "mushrooms",
      "nectarines",
      "okra",
      "onion",
      "oranges",
      "oysters",
      "papaya",
      "passion fruit",
      "peaches",
      "pears",
      "peanut",
      "peas",
      "pecans",
      "peppers",
      "pistachios",
      "plums",
      "pollock",
      "potatoes",
      "pumpkins",
      "radishes",
      "raspberries",
      "rhubarb",
      "rutabaga",
      "scallion",
      "shrimp",
      "snap bean",
      "spinach",
      "squash",
      "strawberries",
      "sweet corn",
      "sweet potatoes",
      "tangerines",
      "tomatoes",
      "turkey-bourbon red",
      "turkey-midget white",
      "turkey-standard bronze",
      "turnips",
      "watermelons",
      "zucchini",
    ]

    ingredients.each do |ingredient|
      Ingredient.create(name: ingredient)
    end



        states = ["Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming"]

        # states = ["West Virginia"]

        # *********Beginning of Sanitation**********

        # Sanitize ingredients that we want to rephrase or remove.
        # For any item to omit add to "omit"
        # For any item to rename first add the name to be modified followed by the rename
        ingredients_to_omit = [ "Christmas Trees", "Wreathes"]
        ingredients_to_rename = [
        	["Oysters, Eastern", "Oyster"],
        	["Turkey - Standard Bronze", "Turkey"],
        	["Turkey - Midget White", "Turkey"],
        	["Turkey - Bourbon Red", "Turkey"],
        	["Pollock (Alaskan)", "Cod"]
        ]

        # *********End of Sanitation**********

        base_url = "http://www.simplesteps.org/eat-local/state/"
        data = []
        counter = 1
        for state in states
        	# puts "*** #{counter}.  #{state} ***"
        	state_hash = {}
        	state_hash[:state_name] = state
        	url = "http://www.simplesteps.org/eat-local/state/#{state.downcase.tr_s(" ", "-")}"
        	response = HTTParty.get url
        	dom = Nokogiri::HTML(response.body)
        	seasons = dom.css('.state-produce').css('.season')
        	season_data = []
        	for season in seasons
        		season_hash = {}
        		season_hash[:season_name] = season.css('h3').text
        		# puts "--- #{season_hash[:season_name]} ---"
        		ingredients = []
        		for ingredient in season.css('a')
        			if !ingredients_to_omit.include? ingredient.text
        				# if ingredient is not in our omission list
        				ingredients << ingredient.text
        			end
        		end
        		# rename ingredients we flagged to be renamed
        		for ingredient in ingredients_to_rename
        			# if ingredients includes an ingredient to rename
        			if ingredients.include? ingredient[0]
        				# delete that ingredient and replace it
        				ingredients.delete(ingredient[0])
        				ingredients << ingredient[1]
        			end
        		end
        		# remove duplicates
        		ingredients.uniq!
        		season_hash[:ingredients] = ingredients
        		season_data << season_hash
        	end
        	state_hash[:season_data] = season_data
        	data << state_hash
        	counter += 1
        end


        #Compile all ingredients from all states, and all seasons into a single master ingredients array.
        master_ingredients = []
        for state in data    		# for every state
        	for season_hash in state[:season_data]      # for every season
        		# state[:season_data] returns an array of hashes
        		# loop through every hash in state[:season_data]
        		for ingredient in season_hash[:ingredients]		# <- returns an array of ingredients
        			master_ingredients << ingredient
        		end
        	end
        end
        # p master_ingredients.uniq.sort
        # puts "total ingredients with duplicates: #{master_ingredients.length}"
        # puts "total unique ingredients: #{master_ingredients.uniq.length}"



        # ************ Notes ************
        # Debugging code to inspect array for multiples of an ingredient
        # Echos the frequency of every unique ingredient
        # **best used when states array has one element
        # cross-reference this with the page of a particular state

        # for uniq_ingredient in master_ingredients.uniq
        # 	counter = master_ingredients.count(uniq_ingredient)
        # 	puts "#{counter}   #{uniq_ingredient}"
        # end
        # ************ End of Notes ************

        # Choose the unique subset of master ingredients array when creating seed data for ingredients table

        # Seeding unique ingredients to the Ingredients table
        # Ingredient.create(name: [ingredient_name STRING])
        # ingredients_seed = []
        # for ingredient in master_ingredients.uniq
        # 	create = "Ingredient.create(name: #{ingredient})"
        # 	ingredients_seed << create
        # end
        # puts ingredients_seed

        # seed ingredients table
        # Output is designed to be copied from the terminal and pasted into the seeds.rb
        puts "#{master_ingredients.uniq.sort}.each{ |ing| Ingredient.create(name: ing)}"


        # map seasons to weeks of the year so that we can populate state_ingredients table with in_season_week field
        def get_weeks_from_period(time_period)
        	# time_period (string), that maps to a early or late period of a month
        	# returns an array of integers that converts the time_period to series
        	# of week numbers in a 52-week year.

        	# data source:
        	# http://www.simplesteps.org/eat-local/state/

        	case time_period
        	when "Early January"
        		return [1, 2]
        	when "Late January"
        		return [3, 4]
        	when "Early February"
        		return [5, 6]
        	when "Late February"
        		return [7, 8]
        	when "Early March"
        		return [9, 10]
        	when "Late March"
        		return [11, 12, 13]
        	when "Early April"
        		return [14, 15]
        	when "Late April"
        		return [16, 17]
        	when "Early May"
        		return [18, 19]
        	when "Late May"
        		return [20, 21]
        	when "Early June"
        		return [22, 23]
        	when "Late June"
        		return [24, 25, 26]
        	when "Early July"
        		return [27, 28]
        	when "Late July"
        		return [29, 30]
        	when "Early August"
        		return [31, 32]
        	when "Late August"
        		return [33, 34]
        	when "Early September"
        		return [35, 36, 37]
        	when "Late September"
        		return [38, 39]
        	when "Early October"
        		return [40, 41]
        	when "Late October"
        		return [42, 43]
        	when "Early November"
        		return [44, 45]
        	when "Late November"
        		return [46, 47, 48]
        	when "Early December"
        		return [49, 50]
        	when "Late December"
        		return [51, 52]
        	end
        end

        # for each ingredient in a season
        # add a record for every week in that season
        # with corresponding IDs for state and ingredient

        rows_to_insert = []
        for state in data
        	state_name = state[:state_name]
        	state_id = State.find_by(name: state_name)
        	for season in state[:season_data]		# <- returns an array
        		get_weeks_from_period(season[:season_name]).each do |week_num| # <- returns an array of week numbers
        			for ingredient in season[:ingredients]
        				# puts "Create: "
        				# puts "#{state_name}, #{season[:season_name]}, #{week_num}, #{ingredient}"
        				# puts "*******"
        				create_hash = {}
        				create_hash[:ingredient_id] = ingredients
        				create_hash[:state_id] = state_name
        				create_hash[:in_season_week] = week_num
        			end
        		end
        	end
        end
